name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      test_examples:
        description: 'Run example tests'
        required: false
        default: false
        type: boolean

env:
  TERRAFORM_VERSION: 1.11.0
  TFLINT_VERSION: v0.48.0
  TRIVY_VERSION: v0.63.0

jobs:
  discover-modules:
    name: Discover Modules and Examples
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-matrix.outputs.modules }}
      examples: ${{ steps.set-matrix.outputs.examples }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Discover modules and examples
      id: set-matrix
      run: |
        # Discover modules
        modules=$(find modules -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
        echo "modules=$modules" >> $GITHUB_OUTPUT
        echo "Discovered modules: $modules"

        # Discover examples
        examples=$(find examples -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
        echo "examples=$examples" >> $GITHUB_OUTPUT
        echo "Discovered examples: $examples"

  terraform-checks:
    name: Terraform Checks (${{ matrix.module }})
    runs-on: ubuntu-latest
    needs: discover-modules
    strategy:
      matrix:
        module: ${{ fromJson(needs.discover-modules.outputs.modules) }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive modules/

    - name: Terraform Init
      run: terraform init
      working-directory: modules/${{ matrix.module }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: modules/${{ matrix.module }}

  tflint:
    name: TFLint (${{ matrix.module }})
    runs-on: ubuntu-latest
    needs: discover-modules
    strategy:
      matrix:
        module: ${{ fromJson(needs.discover-modules.outputs.modules) }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache TFLint plugin dir
      uses: actions/cache@v3
      with:
        path: ~/.tflint.d/plugins
        key: ${{ runner.os }}-tflint-${{ hashFiles('.config/.tflint.hcl') }}

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: ${{ env.TFLINT_VERSION }}

    - name: Show TFLint version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init --config .config/.tflint.hcl

    - name: Run TFLint
      run: tflint -f compact --config ../../.config/.tflint.hcl
      working-directory: modules/${{ matrix.module }}

  trivy:
    name: Trivy Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.31.0
      with:
        version: ${{ env.TRIVY_VERSION }}
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docs:
    name: Generate Documentation (${{ matrix.module }})
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: discover-modules
    strategy:
      matrix:
        module: ${{ fromJson(needs.discover-modules.outputs.modules) }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Render terraform docs and push changes back to PR
      uses: terraform-docs/gh-actions@v1.0.0
      with:
        working-dir: modules/${{ matrix.module }}
        config-file: ../../.config/.terraform-docs.yml
        output-file: README.md
        git-push: "true"

  examples:
    name: Test Examples (${{ matrix.example }})
    runs-on: ubuntu-latest
    needs: discover-modules
    if: |
      github.event.inputs.test_examples == 'true' ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'test-examples')) ||
      (github.event_name == 'push' && contains(github.event.head_commit.message, '[test-examples]'))
    strategy:
      matrix:
        example: ${{ fromJson(needs.discover-modules.outputs.examples) }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: examples/${{ matrix.example }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: examples/${{ matrix.example }}

    - name: Terraform Plan
      run: terraform plan
      working-directory: examples/${{ matrix.example }}
